import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, List
from data.database import Database
from aiogram import Bot

logger = logging.getLogger(__name__)

class ReminderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""

    def __init__(self, database: Database, bot: Bot):
        self.database = database
        self.bot = bot
        self.reminder_task = None
        self.is_running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if self.reminder_task is None:
            self.is_running = True
            self.reminder_task = asyncio.create_task(self._reminder_loop())
            logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.is_running = False
        if self.reminder_task:
            self.reminder_task.cancel()
            try:
                await self.reminder_task
            except asyncio.CancelledError:
                pass
            self.reminder_task = None
            logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _reminder_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                await self._check_and_send_reminders()
                await asyncio.sleep(30)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            reminders = await self.database.get_pending_reminders()

            for reminder in reminders:
                try:
                    await self._send_reminder(reminder)
                    await self.database.mark_reminder_sent(reminder['id'])
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reminder['user_id']}")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(1)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder['id']}: {e}")
                    await self.database.mark_reminder_failed(reminder['id'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)

    async def _send_reminder(self, reminder: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            await self.bot.send_message(
                chat_id=reminder['user_id'],
                text=reminder['message_text'],
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reminder['user_id']}: {e}")
            raise

    async def create_booking_reminders(self, user_id: int, booking_id: int,
                                     appointment_time: datetime, procedure_name: str):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        try:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ UTC.
            appointment_time_utc = appointment_time.astimezone(timezone.utc)
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
            day_before = appointment_time_utc - timedelta(days=1)
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
            if day_before > datetime.now(timezone.utc):
                day_message = f"""üìÖ **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ó–ê–ü–ò–°–ò**

–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:
üéØ **{procedure_name}**
‚è∞ **{appointment_time.strftime('%d.%m.%Y –≤ %H:%M')}**

üìç –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!

üî∏ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ - –∑–≤–æ–Ω–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ

_–ñ–¥–µ–º –≤–∞—Å!_"""

                await self.database.create_reminder(
                    user_id=user_id,
                    booking_id=booking_id,
                    reminder_type='day_before',
                    scheduled_time=day_before,
                    message_text=day_message
                )

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
            two_hours_before = appointment_time_utc - timedelta(hours=2)
            if two_hours_before > datetime.now(timezone.utc):
                hour_message = f"""‚è∞ **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï**

–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å:
üéØ **{procedure_name}**
‚è∞ **{appointment_time.strftime('%H:%M')}**

üìç –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–µ—Ö–∞—Ç—å –≤–æ–≤—Ä–µ–º—è!
üöó –£—á—Ç–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É –∏ –ø–∞—Ä–∫–æ–≤–∫—É

_–î–æ –≤—Å—Ç—Ä–µ—á–∏!_"""

                await self.database.create_reminder(
                    user_id=user_id,
                    booking_id=booking_id,
                    reminder_type='hour_before',
                    scheduled_time=two_hours_before,
                    message_text=hour_message
                )

            logger.info(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {booking_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)

    async def cancel_booking_reminders(self, booking_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            async with self.database.get_connection() as conn:
                await conn.execute("""
                    UPDATE reminders
                    SET status = 'cancelled'
                    WHERE booking_id = ? AND status = 'pending'
                """, (booking_id,))
                await conn.commit()

            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ {booking_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")