from openai import AsyncOpenAI
from typing import Dict
from config import Config
import logging
import tenacity
import re

logger = logging.getLogger(__name__)

def strip_markdown(text: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫—É"""
        text = text.replace('**', '')
        text = text.replace('*', '')
        text = re.sub(r'^#+\s+', '', text, flags=re.MULTILINE)
        return text

class OpenAIService:
    def __init__(self, api_key: str, model: str, model_mini: str, config: Config):
        self.client = AsyncOpenAI(api_key=api_key)
        self.model = model
        self.model_mini = model_mini
        self.config = config

    def _get_system_prompt(self, intent: str, user_profile: Dict = None) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""

        base_prompt = self.config.SYSTEM_PROMPT_BASE

        intent_prompts = {
            "emergency": self.config.SYSTEM_PROMPT_EMERGENCY,
            "consultation": self.config.SYSTEM_PROMPT_CONSULTATION,
            "booking": self.config.SYSTEM_PROMPT_BOOKING,
            "pricing": self.config.SYSTEM_PROMPT_PRICING,
            "aftercare": self.config.SYSTEM_PROMPT_AFTERCARE,
        }
        if intent in intent_prompts:
            base_prompt += "\n\n" + intent_prompts[intent]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_profile:
            profile_info = f"""
–ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê:
–¢–∏–ø –∫–æ–∂–∏: {user_profile.get('skin_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
–í–æ–∑—Ä–∞—Å—Ç: {user_profile.get('age_group', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {user_profile.get('previous_procedures', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
"""
            base_prompt += profile_info

        return base_prompt

    @tenacity.retry(
        wait=tenacity.wait_exponential(multiplier=1, min=4, max=10),
        stop=tenacity.stop_after_attempt(3),
        retry=tenacity.retry_if_exception_type(Exception)
    )

    async def generate_response(
        self,
        user_message: str,
        context: str,
        intent: str = "general",
        user_profile: Dict = None,
        use_mini: bool = False
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π"""

        try:
            model = self.model_mini if use_mini else self.model
            system_prompt = self._get_system_prompt(intent, user_profile)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            context_quality = self._evaluate_context_quality(context, user_message)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
            if user_profile:
                profile_info = f"""
                –ü–†–û–§–ò–õ–¨ –ö–õ–ò–ï–ù–¢–ê:
                –¢–∏–ø –∫–æ–∂–∏: {user_profile.get('skin_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
                –í–æ–∑—Ä–∞—Å—Ç: {user_profile.get('age_group', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
                –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {user_profile.get('previous_procedures', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
                """
                system_prompt += profile_info

            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"""–ö–ê–ß–ï–°–¢–í–û –ù–ê–ô–î–ï–ù–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò: {context_quality}
                 –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô:
{context if context.strip() else "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

–í–û–ü–†–û–° –ö–õ–ò–ï–ù–¢–ê: {user_message}
–í–ê–ñ–ù–û: –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è ({intent}) –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""}
            ]

            response = await self.client.chat.completions.create(
                model=model,
                messages=messages,
                max_tokens=800 if intent == "emergency" else 600,
                temperature=0.7,
                presence_penalty=0.1
            )
            if not response or not response.choices:
                logger.warning("OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return self._get_fallback_response(intent, user_message)

            content = response.choices[0].message.content

            clean_content = strip_markdown(content)
            if not content or not content.strip():
                logger.warning("OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                return self._get_fallback_response(intent, user_message)

            return clean_content

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ OpenAI: {e}")
            return self._get_fallback_response(intent, user_message)
    def _evaluate_context_quality(self, context: str, user_message: str) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not context or context.strip() == "":
            return "–û–¢–°–£–¢–°–¢–í–£–ï–¢"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in context:
            return "–û–¢–°–£–¢–°–¢–í–£–ï–¢"

        context_words = set(context.lower().split())
        message_words = set(user_message.lower().split())

        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        overlap = len(context_words.intersection(message_words))

        if overlap >= 3:
            return "–í–´–°–û–ö–û–ï"
        elif overlap >= 1:
            return "–°–†–ï–î–ù–ï–ï"
        else:
            return "–ù–ò–ó–ö–û–ï"

    async def classify_intent(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GPT"""
        try:
            response = await self.client.chat.completions.create(
                model=self.model_mini,
                messages=[
                    {
                        "role": "system",
                        "content": """–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏.
                        –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω–æ —Å–ª–æ–≤–æ:

                        emergency - —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è, –∞–ª–ª–µ—Ä–≥–∏–∏, –±–æ–ª—å, –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è
                        consultation - –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö, —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        booking - –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
                        pricing - –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–Ω–∞—Ö, —Å—Ç–æ–∏–º–æ—Å—Ç–∏, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç
                        aftercare - —É—Ö–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä, —á—Ç–æ –º–æ–∂–Ω–æ/–Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ
                        general - –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–ª–∏–Ω–∏–∫–µ, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
                    },
                    {"role": "user", "content": message}
                ],
                max_tokens=10,
                temperature=0.1
            )

            if not response or not response.choices:
                return "general"

            intent = response.choices[0].message.content.strip().lower()
            valid_intents = ["emergency", "consultation", "booking", "pricing", "aftercare", "general"]

            return intent if intent in valid_intents else "general"

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è: {e}")
            return "general"

    def _get_fallback_response(self, intent: str, user_message: str = "") -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ API"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ fallback
        message_lower = user_message.lower() if user_message else ""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ —á–µ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if any(word in message_lower for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ"]):
            return f"""üí∞ –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö.

üìû –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã —É—Ç–æ—á–Ω—è–π—Ç–µ:
–¢–µ–ª–µ—Ñ–æ–Ω: {self.config.CLINIC_PHONE}
üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {self.config.WORKING_HOURS}

üí° –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –≥–¥–µ –≤—Ä–∞—á –ø–æ–¥–±–µ—Ä–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –æ–∑–≤—É—á–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å."""

        if any(word in message_lower for word in ["–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–≤—Ä–µ–º—è"]):
            return f"""üìÖ –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–∏—Å–∏.

üìû –î–ª—è –∑–∞–ø–∏—Å–∏ –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é:
–¢–µ–ª–µ—Ñ–æ–Ω: {self.config.CLINIC_PHONE}
üí¨ WhatsApp: {self.config.CLINIC_PHONE}

üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {self.config.WORKING_HOURS}
üìç –ê–¥—Ä–µ—Å: {self.config.CLINIC_ADDRESS}

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–±–µ—Ä–µ—Ç —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –∫ –≤–∏–∑–∏—Ç—É."""

        if intent == "emergency":
            return f"""üö® –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –°–ë–û–ô, –ù–û –í–ê–®–ê –°–ò–¢–£–ê–¶–ò–Ø –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø!

üìû –û–ë–†–ê–©–ê–ô–¢–ï–°–¨ –ù–ï–ú–ï–î–õ–ï–ù–ù–û:
–ö–ª–∏–Ω–∏–∫–∞: {self.config.CLINIC_PHONE}
–°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103

‚ö†Ô∏è –ü—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–æ—Å–ª–µ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä - –∑–≤–æ–Ω–∏—Ç–µ –≤ –∫–ª–∏–Ω–∏–∫—É –∏–ª–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –ª–∏—á–Ω–æ!

–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –ø—Ä–∏: –±–æ–ª—è—Ö, —Å–∏–ª—å–Ω—ã—Ö –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è—Ö, –æ—Ç–µ–∫–∞—Ö, –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö."""

        if any(word in message_lower for word in ["–ø—Ä–æ—Ü–µ–¥—É—Ä", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"]):
            return f"""üí¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö.

üìû –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:
–¢–µ–ª–µ—Ñ–æ–Ω: {self.config.CLINIC_PHONE}
üí¨ WhatsApp: {self.config.CLINIC_PHONE}

üë©‚Äç‚öïÔ∏è –ù–∞—à–∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Ç –ø–æ:
‚Ä¢ –ü–æ–¥–±–æ—Ä—É –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
‚Ä¢ –û—Ç–≤–µ—Ç–∞–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö

üïê –†–µ–∂–∏–º: {self.config.WORKING_HOURS}"""

        # –û–±—â–∏–π fallback
        return f"""üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏:
–¢–µ–ª–µ—Ñ–æ–Ω: {self.config.CLINIC_PHONE}
üí¨ WhatsApp: {self.config.CLINIC_PHONE}
üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {self.config.WORKING_HOURS}

üë©‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ª–∏—á–Ω–æ.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."""