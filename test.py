import pytest
import asyncio
import json
import tempfile
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
from config import Config
from services.bot_logic import SimpleBotLogic, IntentClassifier
from services.openai_service import OpenAIService
from services.pinecone_service import PineconeService
#from services.google_calendar_service import GoogleCalendarService
from services.session_manager import SessionManager
from services.storage import SimpleFileStorage
from data.database import Database

# ================== –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï ==================

class TestData:
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    SAMPLE_USERS = [
        {
            "telegram_id": 12345,
            "username": "test_user",
            "first_name": "–ê–Ω–Ω–∞",
            "last_name": "–¢–µ—Å—Ç–æ–≤–∞"
        },
        {
            "telegram_id": 67890,
            "username": "admin_user",
            "first_name": "–ê–¥–º–∏–Ω",
            "last_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
    ]

    INTENT_TEST_CASES = [
        ("—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞", "pricing", 0.7),
        ("—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "booking", 0.5),
        ("–ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —á—Ç–æ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å", "aftercare", 0.6),
        ("–±–æ–ª–∏—Ç –º–µ—Å—Ç–æ —É–∫–æ–ª–∞", "emergency", 0.5),
        ("–∫–∞–∫—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∂–∏—Ä–Ω–æ–π –∫–æ–∂–∏", "consultation", 0.0),
        ("–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞", "consultation", 0.0),
        ("—Ü–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞, –≥–ª–∞–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "consultation", 0.0),  # –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    ]

    SAMPLE_CALENDAR_SLOTS = [
        {
            'start': datetime(2024, 12, 15, 10, 0),
            'end': datetime(2024, 12, 15, 11, 0),
            'date_str': '15.12.2024',
            'time_str': '10:00',
            'weekday': '–í—Å',
            'display': '15.12.2024 (–í—Å) 10:00'
        },
        {
            'start': datetime(2024, 12, 16, 14, 0),
            'end': datetime(2024, 12, 16, 15, 0),
            'date_str': '16.12.2024',
            'time_str': '14:00',
            'weekday': '–ü–Ω',
            'display': '16.12.2024 (–ü–Ω) 14:00'
        }
    ]
# ================== –§–ò–ö–°–¢–£–†–´ ==================

@pytest.fixture
def test_config():
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    config = Config()
    config.DATABASE_PATH = ":memory:"  # In-memory SQLite –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    #config.GOOGLE_CREDENTIALS_PATH = "test_credentials.json"
    #config.GOOGLE_CALENDAR_ID = "test_calendar"
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"üìÅ –ë–∞–∑–∞: {config.DATABASE_PATH}")
    return config


@pytest.fixture
async def mock_database(test_config, event_loop): # event_loop –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ –ë–î –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º db_path=":memory:", —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–∞–ª —Å–≤–æ—é —á–∏—Å—Ç—É—é –ë–î
    db = Database(db_path=":memory:", max_connections=1)

    # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
    # –ú—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º init_tables –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –ø—É–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.
    # –ü—É–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è "–ª–µ–Ω–∏–≤–æ" –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ get_connection.

    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º,
    # –∏—Å–ø–æ–ª—å–∑—É—è —Å–∞–º –æ–±—ä–µ–∫—Ç db.

    # –≠—Ç–æ—Ç –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–µ—Å—Ç –Ω–∞—á–Ω–µ—Ç—Å—è
    await db.init_tables()

    yield db  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ –æ–±—ä–µ–∫—Ç –≤ —Ç–µ—Å—Ç

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç–µ—Å—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–ª, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    await db.close_pool()

@pytest.fixture
def mock_session_manager(tmp_path):
    """–ú–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù"""
    sessions_dir = tmp_path / "sessions"
    sessions_dir.mkdir(exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    return SessionManager(sessions_dir)

@pytest.fixture
def mock_intent_classifier():
    """–†–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return IntentClassifier()

@pytest.fixture
async def mock_bot_logic(test_config, mock_database, mock_session_manager):
    """–ò–°–ü–†–ê–í–õ–ï–ù - —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç-–ª–æ–≥–∏–∫–∏"""

    # –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    with patch('services.bot_logic.PineconeService') as mock_pinecone, \
         patch('services.bot_logic.OpenAIService') as mock_openai, \
         patch('services.bot_logic.EmbeddingService') as mock_embedding:

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_pinecone_instance = AsyncMock()
        mock_pinecone_instance.search.return_value = [
            {
                'id': 'test_doc_1',
                'score': 0.8,
                'metadata': {
                    'title': '–ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞',
                    'content': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∏—Å—Ç–∫–µ –ª–∏—Ü–∞'
                }
            }
        ]
        mock_pinecone.return_value = mock_pinecone_instance

        mock_openai_instance = AsyncMock()
        mock_openai_instance.generate_response.return_value = "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI"
        mock_openai_instance.classify_intent.return_value = "consultation"
        mock_openai.return_value = mock_openai_instance

        mock_embedding.return_value = AsyncMock()

        bot_logic = SimpleBotLogic(test_config, mock_session_manager, mock_database)
        yield bot_logic

# ================== UNIT –¢–ï–°–¢–´ ==================

class TestIntentClassification:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""

    def test_intent_classifier_initialization(self, mock_intent_classifier):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        assert mock_intent_classifier is not None
        assert hasattr(mock_intent_classifier, 'compiled_patterns')
        assert len(mock_intent_classifier.compiled_patterns) > 0

    @pytest.mark.parametrize("message,expected_intent,min_confidence", TestData.INTENT_TEST_CASES)
    def test_intent_classification(self, mock_intent_classifier, message, expected_intent, min_confidence):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        intent = mock_intent_classifier.classify_by_keywords_and_patterns(message)
        confidence = mock_intent_classifier.get_confidence_score(message, intent)

        assert intent == expected_intent, f"–î–ª—è '{message}' –æ–∂–∏–¥–∞–ª—Å—è '{expected_intent}', –ø–æ–ª—É—á–µ–Ω '{intent}'"
        assert confidence >= min_confidence, f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence} –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–π {min_confidence}"

    def test_message_normalization(self, mock_intent_classifier):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        test_cases = [
            ("  –ü–†–ò–í–ï–¢  –ú–ò–†  ", "–ø—Ä–∏–≤–µ—Ç –º–∏—Ä"),
            ("–Å–ª–∫–∞-–ø–∞–ª–∫–∞", "–µ–ª–∫–∞-–ø–∞–ª–∫–∞"),
            (["—Å–ø–∏—Å–æ–∫", "—Å–ª–æ–≤"], "—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"),
            (123, "123")
        ]

        for input_msg, expected in test_cases:
            result = mock_intent_classifier.normalize_message(input_msg)
            assert result == expected

class TestDatabase:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–´"""

    @pytest.mark.asyncio
    async def test_database_initialization(self, mock_database):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü - –ò–°–ü–†–ê–í–õ–ï–ù"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        async with mock_database.get_connection() as conn:
            cursor = await conn.execute(
                "SELECT name FROM sqlite_master WHERE type='table'"
            )
            tables = [row[0] for row in await cursor.fetchall()]

        expected_tables = ["users", "conversations", "bookings", "feedback"]
        for table in expected_tables:
            assert table in tables, f"–¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    @pytest.mark.asyncio
    async def test_user_operations(self, mock_database):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù"""
        test_user = TestData.SAMPLE_USERS[0]

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await mock_database.get_or_create_user(
            test_user["telegram_id"],
            test_user
        )

        assert user["telegram_id"] == test_user["telegram_id"]
        assert user["first_name"] == test_user["first_name"]

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_data = {
            "skin_type": "oily",
            "age_group": "young",
            "phone": "+7-999-123-45-67"
        }

        await mock_database.update_user_profile(
            test_user["telegram_id"],
            profile_data
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updated_user = await mock_database.get_user_by_telegram_id(test_user["telegram_id"])
        assert updated_user["skin_type"] == "oily"
        assert updated_user["phone"] == "+7-999-123-45-67"

    @pytest.mark.asyncio
    async def test_conversation_operations(self, mock_database):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∏–∞–ª–æ–≥–∞–º–∏"""
        user_id = 12345

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        conversation_id = await mock_database.save_conversation(
            user_id=user_id,
            message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            response="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
            intent="consultation",
            search_results_count=3
        )

        assert conversation_id is not None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history = await mock_database.get_user_conversations(user_id, limit=5)
        assert len(history) == 1
        assert history[0]["message"] == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert history[0]["intent"] == "consultation"

    @pytest.mark.asyncio
    async def test_booking_operations(self, mock_database):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏"""
        user_id = 12345
        booking_data = {
            "procedure": "–ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞",
            "contact_info": "–ê–Ω–Ω–∞, +7-999-123-45-67",
            "preferred_time": "—É—Ç—Ä–æ–º",
            "notes": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
        }
        await mock_database.get_or_create_user(user_id, {
            "username": "anna",
            "first_name": "–ê–Ω–Ω–∞",
            "last_name": "–ò–≤–∞–Ω–æ–≤–∞"
        })
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        booking_id = await mock_database.create_booking(user_id, booking_data)
        assert booking_id is not None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        bookings = await mock_database.get_pending_bookings()
        assert len(bookings) >= 1

'''class TestGoogleCalendarService:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Google Calendar"""

    @pytest.fixture
    def mock_calendar_service(self):
        """–ú–æ–∫ Google Calendar —Å–µ—Ä–≤–∏—Å–∞"""
        with patch('services.google_calendar_service.build') as mock_build:
            mock_service = MagicMock()
            mock_build.return_value = mock_service

            calendar_service = GoogleCalendarService(
                credentials_path="test_credentials.json",
                calendar_id="test_calendar"
            )
            calendar_service.service = mock_service
            return calendar_service

    @pytest.mark.asyncio
    async def test_get_available_slots(self, mock_calendar_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–∞
        mock_calendar_service.service.events().list().execute.return_value = {
            'items': []  # –ü—É—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        }

        with patch.object(mock_calendar_service, '_get_busy_slots', return_value=[]):
            slots = await mock_calendar_service.get_available_slots(days_ahead=7)

        assert isinstance(slots, list)
        assert len(slots) > 0  # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ª–æ—Ç–æ–≤
        if slots:
            slot = slots[0]
            required_keys = ['start', 'end', 'date_str', 'time_str', 'weekday', 'display']
            for key in required_keys:
                assert key in slot, f"–ö–ª—é—á {key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ—Ç–µ"'''

class TestSessionManager:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π"""

    @pytest.mark.asyncio
    async def test_session_creation_and_retrieval(self, mock_session_manager):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        user_id = 12345

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        session = await mock_session_manager.get_user_session(user_id)

        assert session["user_id"] == user_id
        assert "conversation_history" in session
        assert isinstance(session["conversation_history"], list)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        session["test_data"] = "test_value"
        await mock_session_manager.update_user_session(user_id, session)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        updated_session = await mock_session_manager.get_user_session(user_id)
        assert updated_session["test_data"] == "test_value"

    @pytest.mark.asyncio
    async def test_session_cleanup(self, mock_session_manager):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π"""
        user_id = 12345

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        await mock_session_manager.get_user_session(user_id)

        # –û—á–∏—â–∞–µ–º
        await mock_session_manager.clear_user_session(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
        new_session = await mock_session_manager.get_user_session(user_id)
        assert new_session["user_id"] == user_id

# ================== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ ==================

class TestBotLogicIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞"""

    @pytest.mark.asyncio
    async def test_message_processing_flow(self, mock_bot_logic):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = 12345
        message = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —á–∏—Å—Ç–∫–µ –ª–∏—Ü–∞"

        response, metadata = await mock_bot_logic.process_message(user_id, message)

        assert isinstance(response, str)
        assert len(response) > 0
        assert "intent" in metadata
        assert "search_results" in metadata

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
        session = await mock_bot_logic.session_manager.get_user_session(user_id)
        assert len(session["conversation_history"]) > 0

# ================== –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ ==================

class TestBotFunctionality:
    """–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–´"""

    @pytest.mark.asyncio
    async def test_consultation_flow(self, mock_bot_logic):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù"""
        user_id = 12345

        # –ù–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        response1, _ = await mock_bot_logic.process_message(
            user_id, "–ö–∞–∫–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –∂–∏—Ä–Ω–æ–π –∫–æ–∂–∏?"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç (–ª—é–±–æ–π)
        assert isinstance(response1, str)
        assert len(response1) > 0

        # –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        response2, _ = await mock_bot_logic.process_message(
            user_id, "–£ –º–µ–Ω—è –µ—â–µ –µ—Å—Ç—å —á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏"
        )

        assert isinstance(response2, str)
        assert len(response2) > 0

    @pytest.mark.asyncio
    async def test_pricing_inquiry(self, mock_bot_logic):
        """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω - –ò–°–ü–†–ê–í–õ–ï–ù"""
        user_id = 12345

        response, metadata = await mock_bot_logic.process_message(
            user_id, "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞?"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–∞
        assert isinstance(response, str)
        assert len(response) > 0
        assert "intent" in metadata
        assert isinstance(metadata["intent"], str)

    @pytest.mark.asyncio
    async def test_emergency_handling(self, mock_bot_logic):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù"""
        user_id = 12345

        # –ü–∞—Ç—á–∏–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        with patch.object(mock_bot_logic.intent_classifier, 'classify_by_keywords_and_patterns', return_value='emergency'):
            response, metadata = await mock_bot_logic.process_message(
                user_id, "–£ –º–µ–Ω—è —Å–∏–ª—å–Ω–æ –±–æ–ª–∏—Ç –∏ –≤–æ—Å–ø–∞–ª–∏–ª–æ—Å—å –º–µ—Å—Ç–æ —É–∫–æ–ª–∞!"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ emergency intent
        assert metadata["intent"] == "emergency"
        assert isinstance(response, str)
        assert len(response) > 0

# ================== –ù–ê–ì–†–£–ó–û–ß–ù–´–ï –¢–ï–°–¢–´ ==================

class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    @pytest.mark.asyncio
    async def test_concurrent_users(self, mock_bot_logic):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

        async def simulate_user(user_id: int):
            """–°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            for i in range(3):
                await mock_bot_logic.process_message(
                    user_id, f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}"
                )

        # –ó–∞–ø—É—Å–∫–∞–µ–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        tasks = [simulate_user(i) for i in range(10)]
        await asyncio.gather(*tasks)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
        for user_id in range(10):
            session = await mock_bot_logic.session_manager.get_user_session(user_id)
            assert session["user_id"] == user_id

    @pytest.mark.asyncio
    async def test_database_performance(self, mock_database):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        import time

        start_time = time.time()

        # –°–æ–∑–¥–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π
        for i in range(100):
            await mock_database.save_conversation(
                user_id=i,
                message=f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}",
                response=f"–û—Ç–≤–µ—Ç {i}",
                intent="consultation",
                search_results_count=1
            )

        end_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –±—ã—Å—Ç—Ä–æ (< 10 —Å–µ–∫—É–Ω–¥)
        assert end_time - start_time < 10.0

# ================== –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ==================

class TestSecurity:
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–´"""

    @pytest.mark.asyncio
    async def test_sql_injection_protection(self, mock_database):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù"""
        malicious_input = "'; DROP TABLE users; --"

        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º –≤–≤–æ–¥–æ–º
        user_data = {
            "username": malicious_input,
            "first_name": "Test",
            "last_name": "User"
        }

        try:
            user = await mock_database.get_or_create_user(12345, user_data)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            async with mock_database.get_connection() as conn:
                cursor = await conn.execute("SELECT COUNT(*) FROM users")
                count = await cursor.fetchone()
                assert count[0] >= 0  # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        except Exception as e:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–∑-–∑–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
            assert "DROP TABLE" not in str(e).upper()

    @pytest.mark.asyncio
    async def test_input_sanitization(self, mock_bot_logic):
        """–¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        user_id = 12345

        dangerous_inputs = [
            "<script>alert('xss')</script>",
            "javascript:void(0)",
            "../../../etc/passwd",
            "SELECT * FROM users",
        ]

        for dangerous_input in dangerous_inputs:
            response, _ = await mock_bot_logic.process_message(user_id, dangerous_input)
            # –û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥
            assert dangerous_input not in response