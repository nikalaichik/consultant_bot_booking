from aiogram import Router, F, types
from services.bot_logic import SimpleBotLogic
from bot.keyboards import BotKeyboards
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = Router()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä
@router.callback_query(F.data.startswith("proc_"))
async def procedure_info_handler(callback: types.CallbackQuery, bot_logic: SimpleBotLogic):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö"""
    procedure = callback.data.replace("proc_", "")

    procedure_queries = {
        "cleaning": "—á–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞ –≤–∏–¥—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è",
        "carboxy": "–∫–∞—Ä–±–æ–∫—Å–∏—Ç–µ—Ä–∞–ø–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω–∏—è –∫—É—Ä—Å",
        "microneedling": "–º–∏–∫—Ä–æ–Ω–∏–¥–ª–∏–Ω–≥ dermapen —Ü–µ–Ω–∞ –∫—É—Ä—Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è",
        "massage": "–º–∞—Å—Å–∞–∂ –ª–∏—Ü–∞ –≤–∏–¥—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã",
        "mesopeel": "–º–µ–∑–æ–ø–∏–ª–∏–Ω–≥ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –∫—É—Ä—Å"
    }

    query = procedure_queries.get(procedure, f"–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ {procedure}")
    response, _ = await bot_logic.process_message(callback.from_user.id, query)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏
    booking_keyboard = BotKeyboards.procedure_booking_menu(procedure)
    await callback.message.edit_text(response, reply_markup=booking_keyboard)

@router.callback_query(F.data.startswith("ask_"))
async def ask_procedure_handler(callback: types.CallbackQuery, bot_logic: SimpleBotLogic):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"""
    procedure = callback.data.replace("ask_", "")
    await callback.answer()

    await callback.message.answer(
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ ¬´{procedure}¬ª, –∏ —è –æ—Ç–≤–µ—á—É."
    )
    # —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤ —Å–µ—Å—Å–∏–∏ –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ


@router.callback_query(F.data == "back_to_procedures")
async def back_to_procedures_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    await callback.answer()
    await callback.message.edit_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:",
        reply_markup=BotKeyboards.procedures_menu()
    )

# –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("emergency_"))
async def emergency_handler(callback: types.CallbackQuery, bot_logic: SimpleBotLogic):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
    emergency_type = callback.data.replace("emergency_", "")

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º
    emergency_query = f"—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å {emergency_type} –ø–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å"
    response, _ = await bot_logic.process_message(callback.from_user.id, emergency_query)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏
    emergency_contacts = f"""

üìû –≠–ö–°–¢–†–ï–ù–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´:
–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥: {bot_logic.config.CLINIC_PHONE}
–°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103
WhatsApp: {bot_logic.config.CLINIC_PHONE}"""

    full_response = response + emergency_contacts

    await callback.message.edit_text(full_response)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
    if bot_logic.config.ADMIN_USER_ID:
        admin_alert = f"""üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name}
üì± @{callback.from_user.username}
‚ö†Ô∏è –¢–∏–ø: {emergency_type}
‚è∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}

–ö–ª–∏–µ–Ω—Ç –æ–±—Ä–∞—Ç–∏–ª—Å—è –∑–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â—å—é!"""

        try:
            await callback.bot.send_message(bot_logic.config.ADMIN_USER_ID, admin_alert)
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏")