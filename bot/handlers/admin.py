import logging
import asyncio
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from bot.keyboards import BotKeyboards
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from data.database import Database
from config import Config
from services.bot_logic import SimpleBotLogic
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from zoneinfo import ZoneInfo

logger = logging.getLogger(__name__)

router = Router()

class BroadcastState(StatesGroup):
    waiting_for_message = State()
    waiting_for_confirmation = State()

def cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
    ])
# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("admin"))
async def admin_panel(message: types.Message, bot_logic: SimpleBotLogic, database: Database ):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != bot_logic.config.ADMIN_USER_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analytics = await database.get_analytics_data(days=7)

    admin_text = f"""üë®‚Äçüíº –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 7 –î–ù–ï–ô:
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analytics.get('new_users', 0)}
‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤: {analytics.get('conversations', 0)}

üìã –û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–ü–ò–°–ò:"""

    # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    pending_bookings = await database.get_pending_bookings()

    if pending_bookings:
        for booking in pending_bookings[:5]:
            admin_text += f"""

üÜî –ó–∞—è–≤–∫–∞ {booking['id']}
üë§ {booking['first_name']} {booking['last_name']}
üéØ {booking['procedure']}
üìÖ {booking['created_at'][:16]}"""
        if len(pending_bookings) > 5:
            admin_text += "\n\n‚Ä¶–∏ –µ—â—ë –∑–∞—è–≤–∫–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ."
    else:
        admin_text += "\n\n‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç"

    admin_keyboard = BotKeyboards.admin_menu(show_all_bookings=bool(pending_bookings))
    await message.answer(admin_text, reply_markup=admin_keyboard)

@router.callback_query(F.data == "admin_all_bookings")
async def admin_all_bookings_handler(callback: types.CallbackQuery, database: Database, bot_logic: SimpleBotLogic):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    if callback.from_user.id != bot_logic.config.ADMIN_USER_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    bookings = await database.get_pending_bookings()
    if not bookings:
        await callback.message.edit_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç", reply_markup=BotKeyboards.admin_menu())
        return

    text = "üìã –í–°–ï –û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–ü–ò–°–ò:\n"
    for booking in bookings:
        text += f"""

üÜî {booking['id']}
üë§ {booking['first_name']} {booking['last_name']}
üéØ {booking['procedure']}
üìÖ {booking['created_at'][:16]}"""

    await callback.message.edit_text(text, reply_markup=BotKeyboards.admin_menu())
    await callback.answer()

@router.callback_query(F.data == "start_broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != Config.ADMIN_USER_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return

    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(BroadcastState.waiting_for_message)
    await callback.answer()

# --- –û—Ç–º–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ ---
@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@router.message(StateFilter(BroadcastState.waiting_for_message))
async def get_broadcast_message(message: types.Message, state: FSMContext, database: Database):
    if not (message.text or message.photo):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=cancel_keyboard())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ FSM
    await state.update_data(
        text=message.text or message.caption,
        photo_id=message.photo[-1].file_id if message.photo else None
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    users_count = len(await database.get_all_users())

    await message.answer(
        f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.\n\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
        ])
    )
    await state.set_state(BroadcastState.waiting_for_confirmation)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@router.callback_query(StateFilter(BroadcastState.waiting_for_confirmation), F.data == "confirm_broadcast")
async def confirm_and_start_broadcast(callback: types.CallbackQuery, state: FSMContext, bot: Bot, database: Database):
    await callback.message.edit_text("‚úÖ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    data = await state.get_data()
    users = await database.get_all_users()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    asyncio.create_task(broadcast_sender(bot, users, data, callback.from_user.id))

    await state.clear()
    await callback.answer()

# --- –°–ê–ú–ê –§–£–ù–ö–¶–ò–Ø –†–ê–°–°–´–õ–ö–ò ---
async def broadcast_sender(bot: Bot, users: list[int], data: dict, admin_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π.
    """
    success_count = 0
    fail_count = 0
    start_time = asyncio.get_event_loop().time()

    for user_id in users:
        try:
            if data.get("photo_id"):
                await bot.send_photo(user_id, data["photo_id"], caption=data.get("text"))
            else:
                await bot.send_message(user_id, data["text"])

            success_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1

        # –ó–∞–¥–µ—Ä–∂–∫–∞ 0.1 —Å–µ–∫—É–Ω–¥—ã (10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É) - –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ Telegram
        await asyncio.sleep(0.1)

    end_time = asyncio.get_event_loop().time()
    total_time = round(end_time - start_time, 2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        admin_id,
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time} —Å–µ–∫.\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )

@router.callback_query(F.data == "admin_reminders")
async def admin_show_reminders(callback: types.CallbackQuery, database: Database, bot_logic: SimpleBotLogic):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    if callback.from_user.id != bot_logic.config.ADMIN_USER_ID:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

    reminders = await database.get_all_reminders_for_admin()

    if not reminders:
        await callback.message.edit_text("üîî –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.", reply_markup=BotKeyboards.admin_menu())
        return

    local_tz = ZoneInfo(bot_logic.config.TIMEZONE)

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ
    upcoming_reminders = []
    past_reminders = []

    status_emoji = {
        'pending': '‚è≥',
        'sent': '‚úÖ',
        'failed': '‚ùå',
        'cancelled': 'üö´'
    }

    for r in reminders:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
        try:
            scheduled_time = datetime.fromisoformat(r['scheduled_time']).replace(tzinfo=datetime.utc.timezone).astimezone(local_tz)
            time_str = scheduled_time.strftime('%d.%m %H:%M')
        except (TypeError, ValueError):
            time_str = "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"

        username = f"@{r['username']}" if r['username'] else f"ID: {r['user_id']}"

        line = (
            f"{status_emoji.get(r['status'], '‚ùì')} {time_str} - "
            f"<b>{r.get('procedure', '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞')}</b> –¥–ª—è {username}"
        )

        if r['status'] == 'pending':
            upcoming_reminders.append(line)
        else:
            past_reminders.append(line)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = ""
    if upcoming_reminders:
        text += "<b>‚è≥ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:</b>\n"
        text += "\n".join(upcoming_reminders)
        text += "\n\n"

    if past_reminders:
        text += "<b>üìã –ò–°–¢–û–†–ò–Ø –ó–ê –ù–ï–î–ï–õ–Æ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ—à–∏–±–∫–∏):</b>\n"
        text += "\n".join(past_reminders)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã Telegram
    if len(text) > 4096:
        text = text[:4090] + "\n(...)"

    await callback.message.edit_text(text, reply_markup=BotKeyboards.admin_menu())
    await callback.answer()