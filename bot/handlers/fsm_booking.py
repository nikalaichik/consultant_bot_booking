from __future__ import annotations
from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from bot.states import UserStates
from services.bot_logic import SimpleBotLogic
from bot.keyboards import BotKeyboards
from data.database import Database
from dataclasses import dataclass
from services.google_calendar_service import GoogleCalendarService
from datetime import datetime
import logging
import pytz
from typing import Any, Dict

logger = logging.getLogger(__name__)
router = Router()
tz = pytz.timezone('Europe/Minsk')

@dataclass
class Slot:
    start: datetime
    end: datetime
    date_str: str
    time_str: str
    weekday: str
    display: str

    def serialize(self)-> Dict[str, Any]:
        return {
            "start": self.start.isoformat(),
            "end": self.end.isoformat(),
            "date_str": self.date_str,
            "time_str": self.time_str,
            "weekday": self.weekday,
            "display": self.display,
        }

    @classmethod
    def deserialize(cls, data: Dict[str, Any]) -> Slot:
        start = data["start"]
        end = data["end"]
        if isinstance(start, str):
            start = datetime.fromisoformat(start)
        if isinstance(end, str):
            end = datetime.fromisoformat(end)
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if start.tzinfo is None:
            start = tz.localize(start)
        if end.tzinfo is None:
            end = tz.localize(end)
        return Slot(
            start=start,
            end=end,
            date_str=data["date_str"],
            time_str=data["time_str"],
            weekday=data["weekday"],
            display=data["display"],
    )

@router.callback_query(F.data.startswith("book_"))
async def booking_start_handler(callback: types.CallbackQuery, state: FSMContext, bot_logic: SimpleBotLogic):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É - –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    await callback.answer()
    procedure = callback.data.replace("book_", "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
    procedure_queries = {
        "cleaning": "–æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∏—Å—Ç–∫–µ –ª–∏—Ü–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–∏–¥—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–∫–∞–∑–∞–Ω–∏—è, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è",
        "carboxy": "—á—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ä–±–æ–∫—Å–∏—Ç–µ—Ä–∞–ø–∏—è, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, —ç—Ñ—Ñ–µ–∫—Ç—ã, –ø–æ–∫–∞–∑–∞–Ω–∏—è, –∫—É—Ä—Å",
        "microneedling": "—á—Ç–æ —Ç–∞–∫–æ–µ –º–∏–∫—Ä–æ–Ω–∏–¥–ª–∏–Ω–≥, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫—É—Ä—Å, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è",
        "massage": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Å–∞–∂–µ –ª–∏—Ü–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –≤–∏–¥—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã",
        "mesopeel": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–∑–æ–ø–∏–ª–∏–Ω–≥–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–∫–∞–∑–∞–Ω–∏—è, –∫—É—Ä—Å",
        "consultation": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞"
}
    query = procedure_queries.get(procedure, f"–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ {procedure}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ FSM, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
    user_data = await state.get_data()
    user_profile = user_data.get("user_profile")

    info_response = await bot_logic.get_info_from_kb(query, user_profile)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    procedure_names = {
        "consultation": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞",
        "cleaning": "–ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞",
        "carboxy": "–ö–∞—Ä–±–æ–∫—Å–∏—Ç–µ—Ä–∞–ø–∏—è",
        "mesopeel": "–ú–µ–∑–æ–ø–∏–ª–∏–Ω–≥",
        "microneedling": "–ú–∏–∫—Ä–æ–Ω–∏–¥–ª–∏–Ω–≥",
        "massage": "–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞"
}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    procedure_name = procedure_names.get(procedure, "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞")
    await state.update_data(procedure=procedure, procedure_name=procedure_name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
    confirmation_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞: <b>{procedure_name}</b>\n\n"
    confirmation_text += "üîç <b>–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ:</b>\n"
    confirmation_text += f"{info_response}\n\n"
    confirmation_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."

    await callback.message.answer(
        confirmation_text,
        reply_markup=BotKeyboards.booking_confirmation_menu()
    )
    await state.set_state(UserStates.booking_procedure_confirmation)

@router.callback_query(StateFilter(UserStates.booking_procedure_confirmation), F.data == "cancel_booking")
async def booking_cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=False)
    await state.clear()

    await callback.message.edit_text(
    "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
    reply_markup=BotKeyboards.after_cancel_booking_menu()
    )

@router.callback_query(F.data == "restart_booking")
async def restart_booking_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
    reply_markup=BotKeyboards.booking_selection_menu()
    )

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(callback: types.CallbackQuery):
    await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await callback.message.delete()
    await callback.message.answer(
    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
    reply_markup=BotKeyboards.main_menu()
    )

@router.callback_query(StateFilter(UserStates.booking_procedure_confirmation), F.data == "confirm_booking")
async def booking_confirmation_handler(callback: types.CallbackQuery, state: FSMContext, bot_logic: SimpleBotLogic):
    """–®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è"""
    await callback.answer()
    await callback.message.edit_text("üïê –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    user_data = await state.get_data()
    procedure_name = user_data.get("procedure_name", "–≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Google Calendar –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not hasattr(bot_logic.config, 'GOOGLE_CREDENTIALS_PATH'):
        # Fallback –∫ —Ä—É—á–Ω–æ–π –∑–∞–ø–∏—Å–∏
            await callback.message.edit_text(
                f"üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {procedure_name} —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {bot_logic.config.CLINIC_PHONE}\n"
                f"üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {bot_logic.config.WORKING_HOURS}\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–±–µ—Ä–µ—Ç —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ.",
                reply_markup=BotKeyboards.contact_menu()
        )
            await state.clear()
            return
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Calendar —Å–µ—Ä–≤–∏—Å
        calendar_service = bot_logic.calendar_service

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        slots = await calendar_service.get_available_slots(days_ahead=14)

        if not slots:
            await callback.message.edit_text(
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {procedure_name}.\n\n"
                f"üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–µ –¥–∞—Ç—ã:\n"
                f"{bot_logic.config.CLINIC_PHONE}",
                reply_markup=BotKeyboards.contact_menu()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç—ã –≤ –∫—ç—à –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–ª—è FSM)

        available_slots = [Slot.deserialize(s) for s in slots]

        serialized_slots = [s.serialize() for s in available_slots]
        await state.update_data(available_slots=serialized_slots)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grouped_slots = group_slots_by_date(available_slots)

        text = f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {procedure_name}:</b>\n\n"
        text += f"üìä –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {len(available_slots)} —Å–ª–æ—Ç–æ–≤ –Ω–∞ {len(grouped_slots)} –¥–Ω–µ–π\n"
        text += "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:"


        await callback.message.edit_text(
            text,
            reply_markup=create_time_slots_keyboard(available_slots, page=0)
        )
        await state.set_state(UserStates.booking_time_selection)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.edit_text(
            f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
            f"üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏:\n"
            f"{bot_logic.config.CLINIC_PHONE}",
            reply_markup=BotKeyboards.contact_menu()
)
        await state.clear()

def group_slots_by_date(slots: list[Slot]) -> dict[str, list[Slot]]:
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ—Ç—ã –ø–æ –¥–∞—Ç–∞–º"""
    grouped = {}
    for slot in slots:
        if slot.date_str not in grouped:
            grouped[slot.date_str] = []
        grouped[slot.date_str].append(slot)
    return grouped

@router.callback_query(StateFilter(UserStates.booking_time_selection), F.data.startswith("time_page_"))
async def time_pagination_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.answer()
    page = int(callback.data.split("_")[-1])
    user_data = await state.get_data()
    serialized_slots = user_data.get("available_slots", [])

    if not serialized_slots:
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    available_slots = [Slot.deserialize(s) for s in serialized_slots]
    procedure_name = user_data.get("procedure_name", "–ø—Ä–æ—Ü–µ–¥—É—Ä—É")
    text = f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {procedure_name}:</b>\n\n‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:"

    await callback.message.edit_text(
        text,
        reply_markup=create_time_slots_keyboard(available_slots, page=page)
)

def create_time_slots_keyboard(available_slots: list[Slot], page: int = 0) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    grouped_slots = group_slots_by_date(available_slots)
    dates = list(grouped_slots.keys())

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
    dates_per_page = 3
    start_date_idx = page * dates_per_page
    end_date_idx = start_date_idx + dates_per_page
    page_dates = dates[start_date_idx:end_date_idx]

    buttons = []
    # –ù–∞—Ö–æ–¥–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    global_slot_idx_offset = sum(len(grouped_slots[date]) for date in dates[:start_date_idx])

    current_global_idx = global_slot_idx_offset
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
    for date in page_dates:
        day_slots = grouped_slots[date]
        buttons.append([types.InlineKeyboardButton(text=f"üìÖ {date} ({day_slots[0].weekday})", callback_data="date_header")])

        #–°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è (–≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 3)
        for i in range(0, len(day_slots), 3):
            row_buttons = [types.InlineKeyboardButton(text=f"‚è∞ {slot.time_str}", callback_data=f"time_{current_global_idx + j}")
                for j, slot in enumerate(day_slots[i:i+3])]

            buttons.append(row_buttons)
        current_global_idx += len(day_slots)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
        if date != page_dates[-1]:
            buttons.append([InlineKeyboardButton(text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="separator")])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥. –¥–∞—Ç—ã", callback_data=f"time_page_{page-1}")
        )

    if end_date_idx < len(dates):
        nav_buttons.append(
            InlineKeyboardButton(text="–°–ª–µ–¥. –¥–∞—Ç—ã ‚û°Ô∏è", callback_data=f"time_page_{page+1}")
        )

    if nav_buttons:
        buttons.append(nav_buttons)
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(StateFilter(UserStates.booking_time_selection), F.data.startswith("time_"))
async def time_slot_selected_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.answer()

    try:
        slot_index = int(callback.data.split("_")[1])
        user_data = await state.get_data()
        serialized_slots = user_data.get("available_slots", [])

        if slot_index >= len(serialized_slots):
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ª–æ—Ç
        selected_slot = Slot.deserialize(serialized_slots[slot_index])

        procedure_name = user_data.get("procedure_name")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)
        await state.update_data(selected_slot=selected_slot.serialize())

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        contact_text = f"""‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è:</b> {selected_slot.display}
    üéØ <b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:</b> {procedure_name}

    üìù <b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>

        –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
        1. –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
        2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)


        <b>–ü—Ä–∏–º–µ—Ä:</b>
        –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞
        +375 29 345-67-89
        –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —É—Ç—Ä–æ–º, –µ—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –π–æ–¥"""

        await callback.message.edit_text(contact_text)
        await state.set_state(UserStates.booking_contact_info)


    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(StateFilter(UserStates.booking_time_selection), F.data == "date_header")
async def date_header_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)"""
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∏–∂–µ")


@router.message(StateFilter(UserStates.booking_contact_info))
async def contact_info_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)"""
    user_data = await state.get_data()
    selected_slot_data = user_data.get("selected_slot")
    procedure_name = user_data.get("procedure_name")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(contact_info=message.text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = f"""üìã <b>–ü–†–û–í–ï–†–¨–¢–ï –î–ê–ù–ù–´–ï –ó–ê–ü–ò–°–ò:</b>

    üéØ <b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:</b> {procedure_name}
    üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {selected_slot_data['display']}
    üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
    {message.text}

    ‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º—è –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞.

    –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?"""

    await message.answer(
        confirmation_text,
        reply_markup=create_final_confirmation_keyboard()
        )
    await state.set_state(UserStates.booking_final_confirmation)

def create_final_confirmation_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="final_confirm_booking"),
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")
        ]
    ])

@router.callback_query(StateFilter(UserStates.booking_final_confirmation), F.data == "final_confirm_booking")
async def final_booking_confirmation_handler(callback: types.CallbackQuery, state: FSMContext,
                                           bot_logic: SimpleBotLogic, database: Database):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏ –ë–î"""
    await callback.answer()
    await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    #user_data = {}
    #selected_slot_display = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    #procedure_name_display = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    try:
        user_data = await state.get_data()
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        #selected_slot_data = user_data.get("selected_slot")
        #if selected_slot_data:
        #    selected_slot_display = selected_slot_data.get('display', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
        #procedure_name_display = user_data.get("procedure_name", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

        selected_slot = Slot.deserialize(user_data["selected_slot"])
        #selected_slot_data = user_data.get("selected_slot")
        procedure_name = user_data["procedure_name"]
        #procedure = user_data.get("procedure")
        contact_info = user_data["contact_info"]

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Slot
        #selected_slot = Slot.deserialize(selected_slot_data)

        # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        client_name = contact_info.strip().split('\n')[0] if contact_info else "–ö–ª–∏–µ–Ω—Ç"
        client_phone = contact_info.strip().split('\n')[1] if contact_info and '\n' in contact_info else "–ù–µ —É–∫–∞–∑–∞–Ω"

        calendar_event_id = None
        booking_status = "pending" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        # 1. –°–ù–ê–ß–ê–õ–ê –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
        if hasattr(bot_logic.config, 'GOOGLE_CREDENTIALS_PATH'):
            try:
                event_data = await bot_logic.calendar_service.create_booking(
                    start_time=selected_slot.start,
                    end_time=selected_slot.end,
                    user_id=callback.from_user.id,
                    client_name=client_name,
                    client_phone=client_phone,
                    procedure=procedure_name,
                    username=callback.from_user.username
                )

                if event_data == "SLOT_OCCUPIED":
                    await callback.message.edit_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–æ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç.",
        reply_markup=BotKeyboards.booking_selection_menu() # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ
    )
                    await state.clear()
                    return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

                if isinstance(event_data, dict) and 'id' in event_data:
                    calendar_event_id = event_data['id']
                    booking_status = "confirmed" # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, —Å—Ç–∞—Ç—É—Å - 'confirmed'
                    logger.info(f"–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –≤ Google Calendar: {event_data}")

            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending': {e}", exc_info=True)

        # 2. –ü–û–°–õ–ï —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –Ω–∞—à–µ–π –ë–î —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        booking_id = await database.create_booking(
            user_id=callback.from_user.id,
            booking_data={
                "procedure": procedure_name,
                "contact_info": contact_info,
                "preferred_time": selected_slot.display,
                "notes": f"–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞. Telegram: @{callback.from_user.username}",
                "status": booking_status, # <--- –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                "calendar_event_id": calendar_event_id, # <--- –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è
                "calendar_slot": selected_slot.start.isoformat() # <--- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            }
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        booking_id = await database.create_booking(
            user_id=callback.from_user.id,
            booking_data={
                "procedure": procedure_name,
                "contact_info": contact_info,
                "preferred_time": selected_slot.display,
                "notes": f"–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞. Telegram: @{callback.from_user.username}",
                "calendar_slot": selected_slot.start.isoformat()
            }
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if booking_status == "confirmed":
            calendar_status_msg = "üóìÔ∏è <b>–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞!</b>"
            admin_calendar_info = f"üóìÔ∏è ID —Å–æ–±—ã—Ç–∏—è: {calendar_event_id}"
        else:
            calendar_status_msg = "üìû <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.</b>"
            admin_calendar_info = "‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏!</b> (–û—à–∏–±–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)"

        success_text = f"""‚úÖ <b>–ó–ê–Ø–í–ö–ê –ù–ê –ó–ê–ü–ò–°–¨ –ü–†–ò–ù–Ø–¢–ê!</b>

üìã <b>–î–ï–¢–ê–õ–ò –ó–ê–Ø–í–ö–ò:</b>
üÜî –ù–æ–º–µ—Ä: #{booking_id}
üéØ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_name}
üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {selected_slot.display}
{calendar_status_msg}

    ‚è∞ <b>–ß–¢–û –î–ê–õ–¨–®–ï:</b>
    1. –ú—ã –ø—Ä–∏—à–ª–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.
    2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.

    üìû <b>–ö–û–ù–¢–ê–ö–¢–´:</b>
    {bot_logic.config.CLINIC_PHONE}
    """

        await callback.message.edit_text(success_text, reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=BotKeyboards.main_menu())

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if bot_logic.config.ADMIN_USER_ID:
            admin_text = f"""üìÖ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{booking_id}

üë§ –ö–ª–∏–µ–Ω—Ç: {callback.from_user.full_name} (@{callback.from_user.username})
üéØ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_name}
üìÖ –í—Ä–µ–º—è: {selected_slot.display}
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact_info}
{admin_calendar_info}"""
            await callback.bot.send_message(bot_logic.config.ADMIN_USER_ID, admin_text)

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if booking_status == "confirmed" and hasattr(bot_logic, 'reminder_service'):
            try:
                await bot_logic.reminder_service.create_booking_reminders(
                    user_id=callback.from_user.id,
                    booking_id=booking_id,
                    appointment_time=selected_slot.start,
                    procedure_name=procedure_name
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)
        await state.clear()
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        selected_slot_display = user_data.get("selected_slot", {}).get('display', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
        procedure_name_display = user_data.get("procedure_name", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

        error_text = f"""üòî <b>–û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ó–ê–ü–ò–°–ò</b>
    –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.

    üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:
    {bot_logic.config.CLINIC_PHONE}


    –°–æ–æ–±—â–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
    ‚Ä¢ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {selected_slot_display}
    ‚Ä¢ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_name_display}
    ‚Ä¢ –í–∞—à–µ –∏–º—è: {callback.from_user.full_name}

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"""

# 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—à–∏–±–∫–µ
        if bot_logic.config.ADMIN_USER_ID:
            admin_alert = f"""üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏!</b>

‚Ä¢ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {callback.from_user.full_name} (@{callback.from_user.username}, ID: `{callback.from_user.id}`)
‚Ä¢ <b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:</b> {procedure_name_display}
‚Ä¢ <b>–í—Ä–µ–º—è:</b> {selected_slot_display}
‚Ä¢ <b>–û—à–∏–±–∫–∞:</b> `{str(e)}`

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.</i>"""
            try:
                await callback.bot.send_message(bot_logic.config.ADMIN_USER_ID, admin_alert)
            except Exception as admin_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—à–∏–±–∫–µ: {admin_e}")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback.message.edit_text(error_text, reply_markup=BotKeyboards.contact_menu())
        await state.clear()

@router.callback_query(StateFilter(UserStates.booking_final_confirmation), F.data == "change_time")
async def change_time_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
    await callback.answer()

    user_data = await state.get_data()
    serialized_slots = user_data.get("available_slots", [])
    procedure_name = user_data.get("procedure_name", "–ø—Ä–æ—Ü–µ–¥—É—Ä—É")

    available_slots = [Slot.deserialize(s) for s in serialized_slots]

    text = f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {procedure_name}:</b>\n\n‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:"

    await callback.message.edit_text(
        text,
        reply_markup=create_time_slots_keyboard(available_slots, page=0)
        )

    await state.set_state(UserStates.booking_time_selection)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
@router.callback_query(F.data == "cancel_booking")
async def universal_cancel_booking_handler(callback: types.CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    await callback.answer()
    await state.clear()

    await callback.message.edit_text(
        "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=BotKeyboards.procedures_menu()
    )