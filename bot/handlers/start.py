from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.keyboards import BotKeyboards
from bot.states import UserStates
from data.database import Database
from config import Config
from datetime import datetime, timezone
from zoneinfo import ZoneInfo
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext, database: Database):
    await state.clear()
    user_data = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name
    }
    await database.get_or_create_user(message.from_user.id, user_data)
    welcome_text = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É E-clinic!

–Ø - –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥—É —Å:
üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º
üìÖ –ó–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º
üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö
üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é üëá"""
    await message.answer(welcome_text, reply_markup=BotKeyboards.main_menu())

@router.message(Command("menu"))
async def menu_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(
        "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá",
        reply_markup=BotKeyboards.main_menu()
    )

@router.message(F.text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def consultation_start(message: types.Message, state: FSMContext):
    text = "üîç –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø...\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∏–ø –∫–æ–∂–∏"
    await message.answer(text, reply_markup=BotKeyboards.skin_type_menu())
    await state.set_state(UserStates.waiting_for_skin_type)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí∞ –¶–µ–Ω—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
# –û–±—â–∞—è –ª–æ–≥–∏–∫–∞
async def _send_prices_menu(target):
    await target.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ—Ü–µ–¥—É—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã:",
        reply_markup=BotKeyboards.prices_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí∞ –¶–µ–Ω—ã" –∏–∑ ReplyKeyboard
@router.message(F.text == "üí∞ –¶–µ–Ω—ã")
async def show_prices_menu_message(message: types.Message):
    await _send_prices_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã" –∏–∑ InlineKeyboard
@router.callback_query(F.data == "get_prices")
async def show_prices_menu_callback(callback: types.CallbackQuery):
    await _send_prices_menu(callback.message)
    await callback.answer()  # —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–µ–Ω—é —Ü–µ–Ω
@router.callback_query(F.data.startswith("price_"))
async def show_category_prices(callback: types.CallbackQuery):
    prices = {
        "price_cleaning": (
            "üßº –ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞:\n"
            "‚Ä¢ –£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞—è ‚Äî 4000‚Äì6000 ‚ÇΩ\n"
            "‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ‚Äî 5000‚Äì7000 ‚ÇΩ"
        ),
        "price_carboxy": (
            "üí® –ö–∞—Ä–±–æ–∫—Å–∏—Ç–µ—Ä–∞–ø–∏—è:\n"
            "‚Ä¢ 1 –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ ‚Äî 3000‚Äì5000 ‚ÇΩ\n"
            "‚Ä¢ –ö—É—Ä—Å (6‚Äì10 –ø—Ä–æ—Ü–µ–¥—É—Ä)"
        ),
        "price_microneedling": (
            "üéØ –ú–∏–∫—Ä–æ–Ω–∏–¥–ª–∏–Ω–≥:\n"
            "‚Ä¢ –û–¥–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ ‚Äî 5000‚Äì9000 ‚ÇΩ"
        ),
        "price_mesopeel": (
            "üîÑ –ú–µ–∑–æ–ø–∏–ª–∏–Ω–≥:\n"
            "‚Ä¢ –û–¥–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ ‚Äî 4000‚Äì8000 ‚ÇΩ"
        ),
        "price_massage": (
            "üëê –ú–∞—Å—Å–∞–∂–∏ –ª–∏—Ü–∞:\n"
            "‚Ä¢ –ö–æ–±–∏–¥–æ ‚Äî 5000‚Äì7500 ‚ÇΩ\n"
            "‚Ä¢ –ë—É–∫–∫–∞–ª—å–Ω—ã–π ‚Äî 4500‚Äì7000 ‚ÇΩ\n"
            "‚Ä¢ 3D –º–∞—Å—Å–∞–∂ ‚Äî 4000‚Äì6000 ‚ÇΩ"
        ),
    }

    answer = prices.get(callback.data, "‚ùå –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    await callback.message.edit_text(
        text=answer,
        reply_markup=BotKeyboards.prices_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    '''await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=BotKeyboards.main_menu()
    )'''
    await callback.message.delete()  # —á—Ç–æ–±—ã —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline —É–±—Ä–∞—Ç—å
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    await message.answer(
    f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    –ö–û–ù–¢–ê–ö–¢–´ –ö–õ–ò–ù–ò–ö–ò:

    üìû –¢–µ–ª–µ—Ñ–æ–Ω:{Config.CLINIC_PHONE}

    üìç –ê–¥—Ä–µ—Å: {Config.CLINIC_ADDRESS}

    üïê –†–µ–∂–∏–º: {Config.WORKING_HOURS}

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —è –±—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å!""",
reply_markup=BotKeyboards.main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û –∫–ª–∏–Ω–∏–∫–µ" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.message(F.text == "üè• –û –∫–ª–∏–Ω–∏–∫–µ")
async def show_about(message: types.Message):
    await message.answer(
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ: \n\n\n –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —è –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!",
reply_markup=BotKeyboards.main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: {Config.ADMIN_USERNAME}",
reply_markup=BotKeyboards.main_menu())

@router.callback_query(F.data == "booking")
async def booking(callback: types.CallbackQuery, state: FSMContext):
  await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
        reply_markup=BotKeyboards.booking_selection_menu()
    )
@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def booking_entrypoint(message: types.Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é,
    –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É.
    """
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
        reply_markup=BotKeyboards.booking_selection_menu()
    )

@router.message(F.text == "üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def my_reminders_handler(message: types.Message, database: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'"""
    try:
        reminders = await database.get_user_reminders(message.from_user.id)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(reminders)}")
        if not reminders:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=BotKeyboards.main_menu()
            )
            return
        local_tz = ZoneInfo("Europe/Minsk")  # –ª–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞

        text = "üìã <b>–í–ê–®–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:</b>\n\n"

        for reminder in reminders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            status_emoji = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
                'sent': '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                'failed': '‚ùå –û—à–∏–±–∫–∞',
                'cancelled': 'üö´ –û—Ç–º–µ–Ω–µ–Ω–æ'
            }.get(reminder['status'], '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            try:
                if isinstance(reminder['scheduled_time'], str):
                    scheduled_time = datetime.fromisoformat(reminder['scheduled_time'])
                else:
                    scheduled_time = reminder['scheduled_time']

                if scheduled_time.tzinfo:
                    scheduled_time = scheduled_time.astimezone(local_tz)
                else:
                    scheduled_time = scheduled_time.replace(tzinfo=timezone.utc).astimezone(local_tz)

                time_str = scheduled_time.strftime('%d.%m.%Y %H:%M')
            except:
                time_str = str(reminder['scheduled_time'])

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_type_text = {
                'day_before': '–ó–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞',
                'hour_before': '–ó–∞ 2 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞',
                'custom': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ'
            }.get(reminder['reminder_type'], reminder['reminder_type'])

            text += f"üìÖ <b>{time_str}</b>\n"
            text += f"üîî {reminder_type_text}\n"
            if reminder.get('procedure'):
                text += f"üéØ {reminder['procedure']}\n"
            text += f"üìä {status_emoji}\n\n"

        if len(reminders) > 5:
            text += f"... –∏ –µ—â–µ {len(reminders) - 5} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"

        await message.answer(text, reply_markup=BotKeyboards.main_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
            reply_markup=BotKeyboards.main_menu()
        )