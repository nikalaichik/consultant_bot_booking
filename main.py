import asyncio
import logging
import time
from collections import defaultdict
from aiogram import Bot, Dispatcher, BaseMiddleware
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from services.storage import SimpleFileStorage
from aiogram.types import TelegramObject, Message
from typing import Callable, Dict, Any, Awaitable
from config import Config
from data.database import Database
from data.loader import KnowledgeBaseLoader
from services.session_manager import SessionManager
from services.bot_logic import SimpleBotLogic
from bot.handlers import start, fsm_consultation, fsm_booking, info_queries, admin, fallback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging(config: Config):

    log_file = config.LOGS_DIR / "bot.log"
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

async def set_bot_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ Telegram.
    """
    commands = [
        BotCommand(command="start", description="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="menu", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        # –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        # BotCommand(command="contacts", description="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

class DependenciesMiddleware(BaseMiddleware):
    def __init__(self, bot_logic: SimpleBotLogic, database: Database):
        self.bot_logic = bot_logic
        self.database = database

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        # –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º bot_logic –∏ database –≤ –∫–∞–∂–¥—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        data["bot_logic"] = self.bot_logic
        data["database"] = self.database
        return await handler(event, data)

#–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ DDOS-–∞—Ç–∞–∫
class RateLimiterMiddleware(BaseMiddleware):
    def __init__(self, max_messages: int = 5, window_seconds: int = 60):
        self.max_messages = max_messages
        self.window_seconds = window_seconds
        self.user_counts = defaultdict(list)

    async def __call__(self, handler, event, data):
        if isinstance(event, Message):
            user_id = event.from_user.id
            now = time.time()
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.user_counts[user_id] = [
                t for t in self.user_counts[user_id] if now - t < self.window_seconds
            ]
            if len(self.user_counts[user_id]) >= self.max_messages:
                await event.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
                return
            self.user_counts[user_id].append(now)
        return await handler(event, data)

async def check_and_prepare_knowledge_base(bot_logic: SimpleBotLogic):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞ –ª–∏ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π, –∏ –µ—Å–ª–∏ –¥–∞, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ.
    """
    logger = logging.getLogger(__name__)
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π Pinecone...")

    try:
        stats = await bot_logic.pinecone_service.get_stats()
        vector_count = stats.get("total_vectors", 0)

        if vector_count == 0:
            logger.warning("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ sample_data...")

            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            loader = KnowledgeBaseLoader(
                pinecone_service=bot_logic.pinecone_service,
                embedding_service=bot_logic.embedding_service
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            success = await loader.load_sample_data()

            if success:
                logger.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
                # –î–∞–µ–º Pinecone –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
                await asyncio.sleep(5)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞, –µ—Å–ª–∏ –ë–ó –∫—Ä–∏—Ç–∏—á–Ω–∞
        else:
            logger.info(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {vector_count} –≤–µ–∫—Ç–æ—Ä–æ–≤. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}", exc_info=True)

async def main():
    config = Config()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ .env –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å
    if not all([config.BOT_TOKEN, config.OPENAI_API_KEY, config.PINECONE_API_KEY]):
        raise ValueError(
            "–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN, OPENAI_API_KEY –∏ PINECONE_API_KEY."
        )


    setup_logging(config)
    logger = logging.getLogger(__name__)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database = Database(config.DATABASE_PATH)

    # –í—ã–∑—ã–≤–∞–µ–º init_tables –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await database.init_tables()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π (—Ñ–∞–π–ª–æ–≤—ã–π)
    session_manager = SessionManager(config.SESSIONS_DIR)
    bot_logic = SimpleBotLogic(config, session_manager, database)

    await check_and_prepare_knowledge_base(bot_logic)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    storage = SimpleFileStorage(storage_dir=config.SESSIONS_DIR / "fsm_states")
    bot = Bot(
        token=config.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher(storage=storage)

    await set_bot_commands(bot)

    await bot_logic.init_reminder_service(bot)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    # 1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(admin.router)

    # 2. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.include_router(start.router)
    #dp.include_router(reminders.router)
    # 3. –°—Ü–µ–Ω–∞—Ä–∏–∏ FSM (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å)
    dp.include_router(fsm_consultation.router)
    dp.include_router(fsm_booking.router)

    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    dp.include_router(info_queries.router)

    # 5. –í –°–ê–ú–û–ú –ö–û–ù–¶–ï - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.include_router(fallback.router)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Middleware
    dp.update.middleware(DependenciesMiddleware(bot_logic=bot_logic, database=database))
    dp.update.middleware(RateLimiterMiddleware())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await bot_logic.shutdown()
        await database.close_pool() # <-- –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())